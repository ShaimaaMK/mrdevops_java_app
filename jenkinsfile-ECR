@Library('my_shared_library') _

pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '350586697974')
        string(name: 'Region', description: "Region of ECR", defaultValue: ' eu-north-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'shaimaa')
}
environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_KEY_ID')
    }

    stages{
         
        stage('Git Checkout'){
                    when { expression {  params.action == 'create' } }
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/ShaimaaMK/mrdevops_java_app.git"
            )
            }
        }
          stage('Unit Test maven'){
         
         when { expression {  params.action == 'create' } }

             steps{
               script{
                   
                    mvnTest()
                }
             }
         }
          stage('Integration Test maven'){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    mvnIntegrationTest()
                }
             }
         }
         stage('Static code analysis: Sonarqube'){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    def SonarQubecredentialsId = 'sonarqube-api'
                    statiCodeAnalysis(SonarQubecredentialsId)
                }
             }
         }
    
         stage('Maven Build : maven'){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    mvnBuild()
                }
             }
         }
         stage('Docker Image Build : ECR'){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
             }
         }
     stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
               def aws_account_id = params.aws_account_id
               def region = params.Region
               def ecr_repoName = params.ECR_REPO_NAME
               sh """
               trivy image ${aws_account_id}.dkr.ecr.eu-north-1.amazonaws.com/${ecr_repoName}:latest > scan.txt
               cat scan.txt
               """
        }
    }

} 
         stage('Docker Image Push : ECR ') {
    when { expression { params.action == 'create' } }
    steps {
        script {
            withCredentials([[$class: 'SecretTextBinding', credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID']]) {
                withCredentials([[$class: 'SecretTextBinding', credentialsId: 'AWS_SECRET_KEY_ID', variable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh """
                    aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${params.aws_account_id}.dkr.ecr.eu-north-1.amazonaws.com
                    docker push ${params.aws_account_id}.dkr.ecr.eu-north-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """
                }
            }
        }
    }
}
         stage('Docker Image Cleanup : ECR '){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
             }
         }
    } 
}

