@Library('my_shared_library') _

pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '350586697974')
        string(name: 'Region', description: "Region of ECR", defaultValue: ' eu-north-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'shaimaa')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
}

    stages{
         
        stage('Git Checkout'){
                    when { expression {  params.action == 'create' } }
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/ShaimaaMK/mrdevops_java_app.git"
            )
            }
        }
      //    stage('Unit Test maven'){
         
        // when { expression {  params.action == 'create' } }

          //   steps{
            //   script{
                   
              //      mvnTest()
               // }
           //  }
        // }
        //  stage('Integration Test maven'){
        //  when { expression {  params.action == 'create' } }
          //   steps{
            //    script{
                   
              //      mvnIntegrationTest()
               // }
            // }
        // }
      //   stage('Static code analysis: Sonarqube'){
        //  when { expression {  params.action == 'create' } }
          //   steps{
            //    script{
                   
              //      def SonarQubecredentialsId = 'sonarqube-api'
                //    statiCodeAnalysis(SonarQubecredentialsId)
               // }
            // }
        // }
    
         //stage('Maven Build : maven'){
          //when { expression {  params.action == 'create' } }
            // steps{
              //  script{
                   
                //    mvnBuild()
              //  }
            // }
        // }
        // stage('Docker Image Build : ECR'){
          //when { expression {  params.action == 'create' } }
            // steps{
              //  script{
                   
                //    dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
             //   }
           //  }
       //  }
  //   stage('Docker Image Scan: trivy '){
    //     when { expression {  params.action == 'create' } }
      //      steps{
        //       script{
          //     def aws_account_id = params.aws_account_id
            //   def region = params.Region
              // def ecr_repoName = params.ECR_REPO_NAME
     //          sh """
       //        trivy image ${aws_account_id}.dkr.ecr.eu-north-1.amazonaws.com/${ecr_repoName}:latest > scan.txt
         //      cat scan.txt
           //    """
//        }
  //  }

//} 
        
//stage('Docker Image Push : ECR ') {
  //  when { expression { params.action == 'create' } }
    //steps {
      //  script {
        //  withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', credentialsId: 'aws_credentials']]) {
  //  sh """
    //    aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${params.aws_account_id}.dkr.ecr.eu-north-1.amazonaws.com
      //  docker push ${params.aws_account_id}.dkr.ecr.eu-north-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
   // """

     //   }
   // }
//}
//}

        // stage('Docker Image Cleanup : ECR '){
        //  when { expression {  params.action == 'create' } }
            // steps{
             //   script{
                   
           //         dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
         //       }
       //      }
     //    }
        // stage('Create EKS Cluster : Terraform'){
   // when { expression {  params.action == 'create' } }
   // steps{
     //   script{
       //     dir('eks_module') {
         //       withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
           //         sh """
             //           terraform init 
               //         terraform plan -var 'access_key=$AWS_ACCESS_KEY_ID' -var 'secret_key=$AWS_SECRET_ACCESS_KEY' -var 'region=eu-north-1' --var-file=./config/terraform.tfvars
                 //       terraform apply -var 'access_key=$AWS_ACCESS_KEY_ID' -var 'secret_key=$AWS_SECRET_ACCESS_KEY' -var 'region=eu-north-1' --var-file=./config/terraform.tfvars --auto-approve
                  //  """
             //   }
          //  }
        //}
    //}
//}
//stage('Connect to EKS '){
  //  when { expression {  params.action == 'create' } }
    //steps{
      //  script{
        //    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials', accessKeyVariable: 'ACCESS_KEY', secretKeyVariable: 'SECRET_KEY']]) {
          //      sh """
            //    aws configure set aws_access_key_id "$ACCESS_KEY"
              //  aws configure set aws_secret_access_key "$SECRET_KEY"
               // aws configure set region "eu-north-1"
               // aws eks --region eu-north-1 update-kubeconfig --name ${params.cluster}
               // """
            //}
       // }
   // }
//}
//stage('Deployment on EKS Cluster'){
  //          when { expression {  params.action == 'create' } }
    //        steps{
      //          script{
                  
        //          def apply = false

          //        try{
            //        input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
              //      apply = true
                //  }catch(err){
                  //  apply= false
                    //currentBuild.result  = 'UNSTABLE'
                  //}
           //       if(apply){

             //       sh """
               //       kubectl apply -f .
                 //   """
             //     }
               // }
            //}
       // }

stage('ZAP Scan') {
     when { expression { params.action == 'create' } }
    steps {
        script {
            withCredentials([string(credentialsId: 'api_key', variable: 'ZAP_API_KEY')]) {
                sh """
                    /usr/local/bin/zap-cli --api-key $ZAP_API_KEY start
                    /usr/local/bin/zap-cli --api-key $ZAP_API_KEY open-url http://a8076801dfdc94a008a9e5549ba3b07e-1507062584.eu-north-1.elb.amazonaws.com/home/data
                    /usr/local/bin/zap-cli --api-key $ZAP_API_KEY active-scan --scanners all http://a8076801dfdc94a008a9e5549ba3b07e-1507062584.eu-north-1.elb.amazonaws.com/home/data
                    /usr/local/bin/zap-cli --api-key $ZAP_API_KEY alerts
                    /usr/local/bin/zap-cli --api-key $ZAP_API_KEY stop
                """
            }
        }
    }
}
}
}


